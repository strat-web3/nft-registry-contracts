{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Registry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Registry is Ownable {\n    enum Status {\n        ACTIVE,\n        DELETED,\n        FROZEN,\n        STOLEN,\n        LOST,\n        MOVED\n    }\n\n    struct Asset {\n        uint network;\n        address contractAddress;\n        uint id;\n        uint Status;\n        string registrar;\n        uint registryId;\n        string info;\n        string ensName;\n    }\n    Asset[] public assets;\n\n    event Registered(uint network, address contractAddress, uint id);\n    event Edited(uint network, address contractAddress, uint id);\n\n    constructor() {}\n\n    function addEntry(\n        uint _network,\n        address _contractAddress,\n        uint _id,\n        uint _Status,\n        string memory _registrar,\n        uint _registryId,\n        string memory _info,\n        string memory _ensName\n    ) public onlyOwner {\n        assets.push(\n            Asset({\n                network: _network,\n                contractAddress: _contractAddress,\n                id: _id,\n                Status: _Status,\n                registrar: _registrar,\n                registryId: _registryId,\n                info: _info,\n                ensName: _ensName\n            })\n        );\n        emit Registered(_network, _contractAddress, _id);\n    }\n\n    function editEntry(\n        uint _network,\n        address _contractAddress,\n        uint _id,\n        uint _Status,\n        string memory _registrar,\n        uint _registryId,\n        string memory _info,\n        string memory _ensName\n    ) public onlyOwner {\n        uint i = getAsset(_registryId);\n        assets[i].network = _network;\n        assets[i].contractAddress = _contractAddress;\n        assets[i].id = _id;\n        assets[i].Status = _Status;\n        assets[i].registrar = _registrar;\n        assets[i].info = _info;\n        assets[i].ensName = _ensName;\n        emit Edited(_network, _contractAddress, _id);\n    }\n\n    function getAsset(uint _registryId) public view returns (uint) {\n        uint result;\n\n        for (uint i; i < assets.length; i++) {\n            if (assets[i].registryId == _registryId) {\n                result = i;\n            }\n        }\n        return result;\n    }\n\n    receive() external payable {\n        revert();\n    }\n\n    fallback() external payable {\n        revert();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}